https://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=3146
#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define PI 3.14159265358979323846
#define pf printf
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()
#include<queue>


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;
/*ll bfs( ll m )
{

    ii x = q.front();q.pop();
    vis[x.first]=1;
    if(x.first==m)return x.second;
    if(x.first-1>=0 && vis[x.first-1]!=1)
    q.push(pair<int,int>(x.first-1,x.second+1));
    if(x.first*2 <=2*m && vis[x.first*2]!=1)
    q.push(pair<int,int>(x.first*2,x.second+1));

    return bfs(m);
}*/
int main()
{
    int n ;
    while(cin>> n){
        stack<int> s ;
        priority_queue<int> pq ;
        queue<int> q ;
        int command ;
        int object ;
        bool que =true ;
        bool stk = true ;
        bool pique = true ;

            for(int i = 0 ;i<n ;i++){
                cin>>command ;
                cin>>object ;
                if(command ==1){
                    if(stk) s.push(object);
                    if(pique)pq.push(object);
                    if(que)q.push(object) ;
                }
                if(command ==2){
                  if(!s.empty()&&s.top()==object&&stk) {
                           s.pop();
                    }else{
                        stk=false ;
                    }
                   if(!q.empty()&&q.front()==object&&que){
                            q.pop();
                  }else{que = false;
                  }

                   if(!pq.empty()&&pq.top()==object&&pique){
                    pq.pop();
                   }else{pique=false;}

            }

    }
                if(stk==false&&pique==false&&que==false){
                    cout<<"impossible"<<endl;
                }else if((stk==true&&pique==true&&que==true)||
                         (stk==true&&pique==true&&que==false)||
                         (stk==true&&pique==false&&que==true)||
                         (stk==false&&pique==true&&que==true)){
                         cout<<"not sure"<<endl ;
                         }
                else if(stk)cout<<"stack"<<endl ;
                else if(que)cout<<"queue"<<endl;
                else if(pique)cout<<"priority queue"<<endl ;
    }

	return 0;
}
