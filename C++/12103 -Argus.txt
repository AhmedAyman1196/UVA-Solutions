//https://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=919
#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define PI 3.14159265358979323846
#define pf printf
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()
#include<queue>


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;
/*ll bfs( ll m )
{

    ii x = q.front();q.pop();
    vis[x.first]=1;
    if(x.first==m)return x.second;
    if(x.first-1>=0 && vis[x.first-1]!=1)
    q.push(pair<int,int>(x.first-1,x.second+1));
    if(x.first*2 <=2*m && vis[x.first*2]!=1)
    q.push(pair<int,int>(x.first*2,x.second+1));

    return bfs(m);

}*/
class CompareDist
{
public:
    bool operator()(pair<int,int> n1,pair<int,int> n2) {
        if (n1.second==n2.second) return n1.first>n2.first ;
        return n1.second>n2.second;
    }
};


int main()
{
    priority_queue<pair<int,int>,vector<pair<int,int> >,CompareDist> pq;
    string registers ;
    int id ;
    int period ;
    cin>>registers ;
    map<int , int > m ;
    while(registers !="#"){
        cin>>id  ;
        cin>>period ;
        pq.push(make_pair( id ,period)) ;
        m[id] = period ;
        cin>> registers ;
        }
        int k ;
        cin>> k;
        ii curr ;
        while(k!= 0){
            curr = pq.top() ;
            pq.pop();
            cout<<curr.first<<endl;
            curr.second += m[curr.first];
            pq.push(curr) ;
            k--;
        }




	return 0;
}
